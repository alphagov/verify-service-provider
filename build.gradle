plugins {
    id 'com.github.ben-manes.versions' version '0.17.0'
}

apply plugin: 'java'
apply plugin: 'application'
apply plugin: 'idea'

repositories {
    if (System.getenv('VERIFY_USE_PUBLIC_BINARIES') == 'true') {
        logger.warn('Production builds MUST NOT be built with public binaries.\nUse artifactory/whitelisted-repos for production builds.\n\n')
        maven { url 'https://dl.bintray.com/alphagov/maven-test' }
        maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases' }
        jcenter()
    }
    else {
        maven { url 'https://artifactory.ida.digital.cabinet-office.gov.uk/artifactory/whitelisted-repos' }
    }
}

project.ext {
    version_number = '1.0.0'
    openSamlVersion = '3.4.0'
    verifyCommonUtils = '2.0.0-337'
    samlLibVersion = "$openSamlVersion-163"
    dropwizardVersion = '1.3.5'
    jaxbapiVersion = '2.2.9'
    hub_saml="$openSamlVersion-15709"

}

dependencies {
    compile(
        "io.dropwizard:dropwizard-core:$dropwizardVersion",
        'org.json:json:20171018',
        "org.opensaml:opensaml-core:$openSamlVersion",
        "org.opensaml:opensaml-saml-impl:$openSamlVersion",
        "uk.gov.ida:saml-metadata-bindings:$samlLibVersion",
        "uk.gov.ida:common-utils:$verifyCommonUtils",
        "uk.gov.ida:saml-serializers:$samlLibVersion",
        "uk.gov.ida:saml-security:$samlLibVersion",
        "uk.gov.ida:saml-extensions:$samlLibVersion",
        "uk.gov.ida:hub-saml:$hub_saml"
    )
    compile("commons-collections:commons-collections:3.2.2") { force = true }
    testCompile(
        'junit:junit:4.12',
        "io.dropwizard:dropwizard-testing:$dropwizardVersion",
        'org.mockito:mockito-core:2.12.0',
        "uk.gov.ida:saml-metadata-bindings-test:$samlLibVersion",
        "uk.gov.ida:saml-utils:$samlLibVersion",
        "uk.gov.ida:common-test-utils:2.0.0-44",
        "org.jsoup:jsoup:1.11.1",
        "javax.xml.bind:jaxb-api:$jaxbapiVersion",
        "uk.gov.ida:hub-saml-test-utils:$hub_saml",
        "com.github.stefanbirkner:system-rules:1.19.0"
    )
    testCompile('com.github.tomakehurst:wiremock:2.11.0'){ transitive = false }
}

sourceSets {
    java9 {
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            java {
                srcDir 'src/main/java9'
            }
        }
    }
    java10 {
        if(JavaVersion.current() >= JavaVersion.VERSION_1_10) {
            java {
                srcDir 'src/main/java10'
            }
        }
    }
    acceptanceTest {
        dependencies {
            "javax.xml.bind:jaxb-api:$jaxbapiVersion"
        }
        java {
            srcDir 'src/acceptance-test/java'
        }
        resources {
            srcDir 'src/acceptance-test/resources'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
        compileClasspath += sourceSets.test.output
    }
    featureTest {
        java {
            srcDir 'src/feature-test/java'
        }
        compileClasspath += sourceSets.main.runtimeClasspath
        compileClasspath += sourceSets.test.runtimeClasspath
        compileClasspath += sourceSets.test.output
    }
}

compileJava {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '8'])
    }
}

compileJava9Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
        options.compilerArgs.addAll(['--release', '9'])
    }
}

compileJava10Java {
    if(JavaVersion.current() >= JavaVersion.VERSION_1_10) {
        options.compilerArgs.addAll(['--release', '10'])
    }
}

version = "$version_number"

distributions {
    main {
        contents {
            from {
                ['README.md', 'RELEASE_NOTES.md', 'verify-service-provider.yml']
            }
        }
    }
}

jar {
    into('META-INF/versions/9') {
        from sourceSets.java9.output
    }
    into('META-INF/versions/10') {
        from sourceSets.java10.output
    }
    manifest {
        attributes(
                "Version": version
        )
        if(JavaVersion.current() >= JavaVersion.VERSION_1_9) {
            attributes.put("Multi-Release", "true")
        }
    }
}

task testAcceptance(type: Test) {
    testClassesDirs = sourceSets.acceptanceTest.output.classesDirs
    classpath += sourceSets.acceptanceTest.runtimeClasspath
}

task testFeature(type: Test) {
    testClassesDirs = sourceSets.featureTest.output.classesDirs
    classpath += sourceSets.featureTest.runtimeClasspath
    forkEvery = 1
}

run {
    args = ["server", "verify-service-provider.yml"]
}

mainClassName = 'uk.gov.ida.verifyserviceprovider.VerifyServiceProviderApplication'
